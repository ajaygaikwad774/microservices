package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.example.demo.model.Student;
import com.example.demo.service.StudentService;

@RestController
@CrossOrigin(origins = "http://localhost:4200/")
public class StudentController {

	@Autowired
	StudentService studentService;

	@Autowired
	MessageSource messageSource;
	// @RequestMapping(value="/user/save",headers="Accept=application/json",method=RequestMethod.POST)

	@RequestMapping(value="/get",method = RequestMethod.GET)
	public ModelAndView hello(){
		ModelAndView model = new ModelAndView();  
		model.setViewName("user");
		return model;
		//return new ModelAndView("redirect:/user.html");
	}
	
	@GetMapping(value = "/hello")
	public String Hello(){
		return messageSource.getMessage("messages.us", null, LocaleContextHolder.getLocale());
	}

	
	@PostMapping(value = "/student/saveStudent", headers = "Accept=application/json")
	public ResponseEntity<Student> createStudent(@Valid @RequestBody Student student){
		System.out.println("Creating Student...... " + student.getName());	
		return new ResponseEntity<Student>(studentService.createStudent(student),HttpStatus.CREATED);
	}
	
	@PostMapping(value = "/student/saveManyStudent", headers = "Accept=application/json")
	public ResponseEntity<List<Student>> createManyStudent(@Valid @RequestBody List<Student> student){		
		return new ResponseEntity<List<Student>>(studentService.createManyStudent(student),HttpStatus.CREATED);
	}

	@GetMapping(value = "/student/read/all", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Student>> getAllStudent() {
		System.out.println(this.getClass().getSimpleName() + " - Get all Student details is invoked.");
		return new ResponseEntity<List<Student>>(studentService.getAllStudent(), HttpStatus.OK);
	}

	@GetMapping(value = "/student/read/{id}", produces = MediaType.APPLICATION_JSON_VALUE , headers = "Accept=application/json" , consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Optional<Student>> getStudent(@PathVariable("id") Long id) {
		System.out.println("Fetching Student with id " + id);
		return new ResponseEntity<Optional<Student>>(studentService.getStudent(id),HttpStatus.OK);
	}

	@PutMapping(value = "/student/updateStudent", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE , headers = "Accept=application/json")
	public ResponseEntity<Student> updateStudent(@Valid @RequestBody Student student){
		System.out.println("Updating Student...... " + student.getName());
		return new ResponseEntity<Student>(studentService.updateStudent(student),HttpStatus.CREATED);
	}


	@DeleteMapping(value = "/student/deletestudent/all", produces = MediaType.APPLICATION_JSON_VALUE , headers = "Accept=application/json" , consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Void> deleteAllStudent() {	
		studentService.deleteAllStudent();
		System.out.println(this.getClass().getSimpleName() + " - Delete all students is invoked.");
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT); 		
	}

	@DeleteMapping(value = "/student/deletestudent/{id}", produces = MediaType.APPLICATION_JSON_VALUE , headers = "Accept=application/json" , consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Void> deleteStudentById(@PathVariable("id") Long id) {	
		studentService.deleteStudentById(id);
		System.out.println(this.getClass().getSimpleName() + "- Delete student by id is invoked." + id);
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT); 		
	}

}
